{
  
    
        "post0": {
            "title": "Assignment 1",
            "content": "toc: true | badges: true | comments: true | categories: [jupyter] | . Question 1 Problem 15 Lattice Path . Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner. . . How many such routes are there through a 20×20 grid? . Solution to Question 1 . We can first consider the grid as a matrix, each element in the matrix represents the number of routes to that a location in the grid. For example, for a 2×2 grid, the corresponding matrix ${a_{i,j}}$ looks like this: $$ left( begin{array}{l} 0&amp; 1 &amp; 1 1&amp; 2&amp;3 1&amp; 3 &amp;6 end{array} right) $$ $a_{2,2}=6$, meaning that there are 6 routes to the bottom right corner. From the $2 times 2$ grid example and our observation, we find that there is always only one route for those located on the left and top of the grid. And for the remaining locations, the number of routes depend on those located on its top and left. So it is a dynamic programming problem. . import numpy as np def count_path(n): &quot;&quot;&quot;The parameter of the function is &quot;&quot;&quot; # Dynamic Programming # Initilize the condition boundary mat = np.zeros((n+1, n+1)) for idx in range(len(mat)): mat[0][idx] = 1 # The top boundary of the grid only has one routes mat[idx][0] = 1 # The left boundary of the grid has only one routes for row in range(1, len(mat)): #dynamic programming for col in range(1, len(mat)): mat[row, col] = mat[row, col-1] + mat[row-1, col] return mat[n][n] #return the location on the bottom right corner if __name__ == &#39;__main__&#39;: print(count_path(20)) . 137846528820.0 . Question 2 Problem 50 Distinct Prime Factors . The prime 41, can be written as the sum of six consecutive primes: 41 = 2 + 3 + 5 + 7 + 11 + 13 This is the longest sum of consecutive primes that adds to a prime below one-hundred. . The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953. . Which prime, below one-million, can be written as the sum of the most consecutive primes? . Solution to Question 2 . First, we need to generate a list of prime number. There is a traditional algorithm called sieve of eratosthenes, which is designed for generating prime numbers less than a given value. . Sieve of Eratosthenes . Create a list of n-1 consecutive integers 2, 3, 4,..., n. 2 is the smallest prime number | For the first loop, set k to 2 | Let k increase k every step until it reaches n, that is, the algorithm loop over k, 2k, 3k,.. and mark these numbers in the list | Then find the smallest number in the list that is not marked and if no such number exists, the algorithm will stop. Otherwise, set k to the new number and iterate again. | At the end of the algorithm, all the numbers that are not marked are the prime numbers.Example:Find prime less than 20&gt; &gt; List all the number that is less than 20:&gt; 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20&gt; Start with 2, then we mark 2, 4, 6,.. 20 2, 3, 5, 7, 9, 11, 13, 15, 17, 19 . The next start number is 3, we will mark 9,15 2, 3, 5, 7, 11, 13, 17, 19 Then we can see that all the prime numbers less than 20 are listed in the above. . | With the sieve of eratosthenes algorithm, we can find all the prime numbers that are less than the given limit. When the limit is 100, the prime list is [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]. For the first loop, We start with the first prime number 2, and we will loop over the whole prime list to check if 2, 2 + 3, 2 + 3 + 5... is a prime number and if the summation exceeds 100. When the summation is a prime number, the current length of the consective prime numbers is the difference between the index of the first number and the last number, and if the summation exceeds 100, the stop index is the index of the last number. In this case, 2 + 3 + 5 + 7+ 11 + 13 + 17 + 19 + 23 = 100, so the stop index should be 9. Since 2 + 3 + 5 + 7+ 11 + 13= 41 is the longest sum of consecutive prime for the first loop, the length of consecutive after first loop is 6. Similarly we start with prime number 3, 5,.... until the algorithm stops. . import numpy as np import math def sieve_func(n): bool_list = [True] * n #This is the list used to indicate whether the number is marked, initially set all the elements to True bool_list[0] = False # 0 is not a prime number bool_list[1] = False # 1 is not a prime number for i in range(2, int(math.sqrt(n))+1): if bool_list[i] is True: for j in range(i**2, n, i): bool_list[j] = False prime_list = [index for index, boolvalue in enumerate(bool_list) if boolvalue == True] # find all the numbers that are not marked return prime_list . def find_distinct_factor(limit): &quot;&quot;&quot; The parameter of this function is the limit value, and the function will return the largest prime that can be written as the sum of the most consecutive primes under the given limit &quot;&quot;&quot; primes = sieve_func(limit) # Set the original length of the consecutive number to be 0 raw_length = 0 # initial value of the consecutive prime sum largest_sum = 0 # the last index for the end of the consecutive number, that is, if the index of the prime in the list exceeds this number, the summation will be larger than the given value # Initially set to the length of the prime list last_idx = len(primes) # two for loops for i in range(len(primes)): for j in range(i + raw_length, last_idx): summation = sum(primes[i:j]) if summation &lt; limit: if summation in primes: raw_length = j - i largest_sum = summation else: # When the summation of the consecutive number exceeds 100, we will set the stop point last_idx = j + 1 break return largest_sum . print(find_distinct_factor(1000000)) . 997651 . Question 3 Problem 123 Prime square remainders . Let $p_n$ be the nth prime: 2, 3, 5, 7, 11,... and let r be the reminder when $(p_n-1)^n + (p_n+1)^n$ is divided by $p_n^2$. . For example, when n = 3, $p_3 =5$, and $4^3 + 6^3 = 280 = 5 mod 25$. . The least value of n for which the reminder first exceeds $10^9$ is 7037. . Find the least value of n for which the reminder first exceeds $10^{10}$. . Solution to Question 3 . The expansion of $(p_n-1)^n$: . $(p_n-1)^n = p_n^n - (n-1)p_n^{n-1}+ binom{n}{n-2}p_n^{n-2}+...+(-1)^{n-1}np_n+(-1)^n$. . The expansion of $(p_n+1)^n$ is: . $(p_n+1)^n= p_n^n+ (n-1)p_n^{n-1}+ binom{n}{n-2}p_n^{n-2}+...+np_n+ 1$. . From the equation above we know that except for the last two terms, all the other terms are divisable by $p_n^2$. Thus, the reminder when $(p_n-1)^n+(p_n+1)^n$ is divided by $p_n^2$ should be: . $r = (-1)^{n-1}np_n+(-1)^n +np_n+1$. . So when n is an odd value, $r = 2np_n$, when n is an even number, $r= 2$. The question requires us to find the least value of n for which the reminder first exceeds $10^{10}$, so n must be an odd number. As is mentioned in the problem description: &quot;the least value of n for which the remainder first exceeds $10^9$ is 7037&quot;, thus the start point can begin with 7037 and we only care about the odd number. We can use the sieve function we defined in Question 2 and list all the prime number which is less than 5000000 (This number does not need to be exact 5000000, we just need to define a large number to make sure that there are enough prime numbers). Then we can loop over the prime number and find the least value of n when the reminder exceeds $10^{10}$ . def find_reminder(n): &quot;&quot;&quot; The find_reminder() function has one parameter n, which is the limit. The function will return the least value of n when the reminder exceeds the given limit. &quot;&quot;&quot; initial_n = 7037 #Set the initial value of n to 7037 limit = n #max limit for the reminder product = 0 primeslist = sieve_func(5_000_000) # Find all the prime number which is less than 5_000_000, the limit can vary while product &lt;= limit: initial_n += 2 product = 2 * initial_n * primeslist[initial_n-1] return initial_n if __name__ == &#39;__main__&#39;: print(find_reminder(10000000000)) . 21035 .",
            "url": "https://lucylin1997.github.io/fastpage_copy/2021/09/01/Assignment1.html",
            "relUrl": "/2021/09/01/Assignment1.html",
            "date": " • Sep 1, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lucylin1997.github.io/fastpage_copy/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lucylin1997.github.io/fastpage_copy/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Profile . Lucy Lin, a devoted and meticulous Master of Biostatistics candidate from Duke University with a solid background in mathematics and statistics, enthusiastic about the application of electronic health data in providing better health care to patients. Currently seeking an internship in Biostatistics/Data Science. Education . Duke University, School of Medicine . Master of Biostatistics &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; Aug,2020 - May, 2022 . Relevant courses: Introduction to Statistical Theory and Methods I and II, Applied Biostatistics Methods I and II, Introduction to Practice of Biostatistics I and II, Introduction to Statistical Programming I and II, Software Tools for Data Science. . Shanghai University of Finance and Economics . Information and Computing Science &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; Sep,2016 - Jun,2020 . Revelent courses: Data Structure, Big Data Process, Statistical Computing, Time series Analysis, Introduction of Stochastic Processes, Differential Equations. .",
          "url": "https://lucylin1997.github.io/fastpage_copy/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lucylin1997.github.io/fastpage_copy/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}